@using Microsoft.AspNet.Identity;
@using RuuviTagApp.Models;
@using RuuviTagApp.ViewModels;
@{
    ViewBag.Title = "Home";

    MacAddressModel mam = Model is MacAddressModel ? Model : new MacAddressModel();
}


@* Tag navbar visible only when user is logged in *@
@if (Request.IsAuthenticated)
{
    @Html.Partial("~/Views/Home/_TagNav.cshtml")

    if (!ViewBag.UserHasEmail)
    {
        <script>
            document.getElementById("btn-tagAlerts").classList.add("disabled");
            document.getElementById("btn-tagAlerts").style.display = "none";
        </script>
    }

} @*End of tag navbar*@

<div class="container-fluid body-content" id="body-content">
    <p class="text-danger">@ViewBag.GeneralError</p>
    @* Content visible only when user is not logged in *@
    @if (!Request.IsAuthenticated && ViewBag.TagData == null)
    {
        <div class="container">
            <div class="row">
                <div class="col-md-6">
                    <h2>Sign in using Google</h2>
                    @Html.Partial("~/Views/Account/_ExternalLoginPartial.cshtml", new ExternalLoginListViewModel())
                </div>
                <div class="col-md-6 mt-lg-0 mt-5">
                    <h2>Continue without signing in</h2>
                    <div class="form-group">
                        @Html.Partial("~/Views/Home/_SearchTagPartial.cshtml", mam)
                    </div>
                </div>
            </div>
        </div>
        ExternalLoginConfirmationViewModel elcvm = Model is ExternalLoginConfirmationViewModel ?
            Model : new ExternalLoginConfirmationViewModel();
        @Html.Partial("~/Views/Account/_ExternalLoginConfirmationModal.cshtml", elcvm)
    } @*End of content visible only when user is not logged in*@

    @* Content visible only when user is logged in *@
    @if (Request.IsAuthenticated)
    {
        AddTagModel add = Model is AddTagModel ? Model : new AddTagModel();
        @Html.Partial("~/Views/Home/_AddTagModal.cshtml", add)
        if (Model is RuuviTagModel tag)
        {
            @Html.Partial("~/Views/Home/_TagSettingsModal.cshtml", tag)
        }
        else
        {
            <div id="tagSettingsModal"></div>
        }
        AddAlertModel alert = Model is AddAlertModel ? Model : new AddAlertModel();
        @Html.Partial("~/Views/Home/_TagAlertsModal.cshtml", alert)
        <div class="row">
            <div class="col-lg-12">
                <div id="infoSelectedItem">
                    <p>Select a RuuviTag or a group to display data</p>
                </div>
            </div>
            <div class="col-lg-12">
                <div class="home-selectedTag" id="home-selectedTag" style="display: none">
                    <h2 id="userSelectionHeader" class="d-inline"></h2>
                    <p id="intervalInfo" style="display: none" class="d-inline">Data interval is 15 minutes</p>
                    <p id="intervalUpdateInfo" style="display: none" class="text-warning"></p>
                    <p id="oldVersionWarning" class="text-warning" style="display: none">This RuuviTag is using Data format 3 which is getting older. Read more <a href="https://lab.ruuvi.com/ruuvitag-fw/" target="blank">here</a>.</p>
                </div>
            </div>
            @*<div class="col-lg-4">
                    <p id="intervalInfo" style="display: none">Data interval is 15 minutes</p>
                </div>*@
            <div class="col-lg-12">
                <div class="spinner-grow loading-spinner ml-0" role="status" id="loading-tagdata" style="display: none">
                    <span class="sr-only">Loading...</span>
                </div>
                <p id="lastUpdated-grp" style="display: none" class="mb-3">Not calculated</p>
            </div>
        </div>
    }@*End of content visible only when user is logged in*@

    <div id="chartarea" style="display:none">
        <div class="RuuviTagData">
            @if (!Request.IsAuthenticated)
            {
                <p id="oldVersionWarning" class="text-warning ml-0" style="display: none">This RuuviTag is using Data format 3 which is getting older. Read more <a href="https://lab.ruuvi.com/ruuvitag-fw/" target="blank">here</a>.</p>
            }
            <div class="row">
                <div class="col-lg-6">
                    <div class="row" id="ruuviTagTemperature">
                        <div class="col-lg-12 col-sm-12">
                            <a class="btn btn-tagdata-temp" id="btn-TagTemp" onclick="highlightTempChart()" title="Highlight temperature"></a>
                            <p id="tagTempNow" class="tagdata-value"></p> <span class="celsius">&#176;C</span>
                            <p class="tagdata-header">Temperature</p>
                            <hr class="tagdata-hr" />
                        </div>
                    </div>
                    <div class="row" id="ruuviTagHumidity">
                        <div class="col-lg-12 col-sm-12">
                            <a class="btn btn-tagdata-hum" id="btn-TagHum" onclick="highlightHumiChart()" title="Highlight humidity"></a>
                            <p id="tagHumNow" class="tagdata-value"></p> <span class="percent">%</span>
                            <p class="tagdata-header">Humidity</p>
                            <hr class="tagdata-hr" />
                        </div>
                    </div>
                    <div class="row" id="ruuviTagAirPressure">
                        <div class="col-lg-12 col-sm-12">
                            <a class="btn btn-tagdata-air" id="btn-TagAir" onclick="highlightPressChart()" title="Highlight air pressure"></a>
                            <p id="tagPressNow" class="tagdata-value"></p> <span class="hpa">hPa</span>
                            <p class="tagdata-header">Air pressure</p>
                            <hr class="tagdata-hr" />
                            <p id="lastUpdated">Not calculated</p>
                        </div>
                    </div>
                </div>
                <div class="col-lg-6 ruuvi-eye-home d-none d-md-block" id="RuuviEyeBg" onmouseover="highlightEye()"> </div>
            </div>
            <p class="tip d-none d-lg-block">Get bigger charts by clicking <a class="link" onclick="highlightIcons()" role="button">the icons</a> above.</p>

            <div id="desktopCharts">
                <div class="row">
                    <div class="col-lg-4" id="col-chart-temperature">
                        <h1 class="tagdata-header">Temperature</h1>
                        <canvas id="tempchart"></canvas>
                    </div>
                    <div class="col-lg-4" id="col-chart-humidity">
                        <h1 class="tagdata-header">Humidity</h1>
                        <canvas id="humchart"></canvas>
                    </div>
                    <div class="col-lg-4" id="col-chart-pressure">
                        <h1 class="tagdata-header">Air pressure</h1>
                        <canvas id="presschart"></canvas>

                    </div>
                </div>
            </div>
            @if (ViewBag.TagData != null)
            {
                <a class="btn btn-general mt-5" href="/Home/Index">Sign in or search another RuuviTag</a>
            }
        </div>

    </div>
    <div id="groupchartarea"></div>
</div>


@section scripts{
    <script type="text/javascript">
        const ctxTemp = document.getElementById('tempchart').getContext('2d');
        const ctxHum = document.getElementById('humchart').getContext('2d');
        const ctxPress = document.getElementById('presschart').getContext('2d');

        class ChartConfig {
            constructor(label) {
                this.label = label;
            }
            make() {
                return {
                    type: 'line',
                    data: {
                        labels: [],
                        datasets: [{
                            label: this.label,
                            data: [],
                            backgroundColor: [
                                'rgba(107, 234, 225, 0.2)'
                            ],
                            borderColor: [
                                'rgba(107, 234, 225, 1)'
                            ],
                            borderWidth: 3
                        }]
                    },
                    options: {
                        scales: {
                            yAxes: [{
                                ticks: {
                                    beginAtZero: true
                                }
                            }]
                        }
                    }
                };
            }
        }

        const configTemp = new ChartConfig('Temperature').make();
        const configHum = new ChartConfig('Humidity').make();
        const configPress = new ChartConfig('Pressure').make();

        window.tempChart = new Chart(ctxTemp, configTemp);
        window.humChart = new Chart(ctxHum, configHum);
        window.pressChart = new Chart(ctxPress, configPress);

        // Function for setting api call time for function lastUpdated
        var ApiCallTime;
        var LastUpdatedElement;
        LastUpdatedElement = document.getElementById("lastUpdated");
        function setApiCallTime(v) {
            let date = new Date();
            ApiCallTime = date.getTime();
            if (v != null) {
                if (v == "grp") {
                    LastUpdatedElement = document.getElementById("lastUpdated-grp");
                    document.getElementById("lastUpdated-grp").style.display = "block";
                } else {
                    LastUpdatedElement = document.getElementById("lastUpdated");
                    document.getElementById("lastUpdated-grp").style.display = "none";
                }
            }
        }

        // Get the last updated time
        let lastUpdatedTimerInterval = 1000; // Defautl 1000 = 1 second
        let lastUpdatedTimer = setInterval(lastUpdated, lastUpdatedTimerInterval);
        function lastUpdated() {
            let date = new Date();
            let currentTime = date.getTime();
            let apiCallTime = ApiCallTime;
            let timeDiff = Math.abs(apiCallTime - currentTime);
            let secDiff = Math.ceil(timeDiff / (1000));
            let lastUpdated = secDiff;
            let updateElement = LastUpdatedElement;

            let sec = 1;
            let min = 60 * sec;

            if (secDiff < 1 * min) {
                lastUpdated = "Page updated " + secDiff + "s ago";
            } else if (secDiff < 2 * min) {
                lastUpdated = "Page updated a minute ago";
            } else if (secDiff >= 2 * min) {
                lastUpdated = "Page updated " + Math.round(secDiff / 60) + " minutes ago";
            } else if (secDiff >= 60 * min) {
                lastUpdatedTimerInterval = 900000; // After an hour, let's call the timer every 15min
            }

            updateElement.innerHTML = lastUpdated;
        }
        var userHasEmail;
        $(window).on('load', function () {
            let showRegisterModal = @((ViewBag.ShowRegisterModal ?? false).ToString().ToLower());
            if (showRegisterModal) {
                $('#externalRegisterModal').modal('show');
            }
            let showAddTag = @((ViewBag.ShowAddTag ?? false).ToString().ToLower());
            if (showAddTag) {
                $('#addTagModal').modal('show');
            }
            let showTagSettings = @((ViewBag.ShowTagSettings ?? false).ToString().ToLower());
            if (showTagSettings) {
                let tagsId = @(ViewBag.Id ?? 0);
                if (tagsId > 0) {
                    $('#TagsId').val(tagsId);
                    selectedTagId = tagsId;
                    tagIdInModal = tagsId;
                }
                $('#tagSettingsModal').modal('show');
            }
            userHasEmail = @((ViewBag.UserHasEmail ?? false).ToString().ToLower());
            let hasData = @((ViewBag.TagData != null).ToString().ToLower());
            if (hasData) {
                const unpackedTagData = @Html.Raw(Json.Encode(ViewBag.TagData));
                let time = [], temp = [], hum = [], press = []
                unpackedTagData.forEach(row => {
                    time.push(parseDate(row.Time));
                    temp.push(row.Data.temperature);
                    hum.push(row.Data.humidity);
                    press.push(row.Data.pressure);
                });
                updateCharts(time, temp, hum, press);
                let warningElement = document.getElementById("oldVersionWarning");
                if (tagVersion(unpackedTagData[0].Data.vers)) {
                    if (warningElement.style.display != "block") {
                        warningElement.style.display = "block";
                    }
                    //console.log('do something to some element?');
                }
                document.getElementById("chartarea").style.display = "block";
            }
        });
        $('.svg-btn-new').click(function () {
            $('#addTag').toggleClass('shown');
        });

        // Highight icons when user presses the tip (if user is lost)
        function highlightIcons() {
            let temp = document.getElementById("btn-TagTemp");
            let hum = document.getElementById("btn-TagHum");
            let air = document.getElementById("btn-TagAir");
            let btns = [temp, hum, air];

            for (var i = 0; i < btns.length; i++) {
                let btn = btns[i];
                btn.classList.add("highlight");
                var t = setTimeout(function () {
                    btn.classList.remove("highlight");
                }, 1000);
            }
        }

        // Highlight eye on mouse over
        function highlightEye() {
            let eye = document.getElementById("RuuviEyeBg");
            eye.classList.toggle('fade');
        }

        // Get user selection from _TagNav dropdown list
        $(document).ready(function () {
            $('#TagListDropDown a').on('click', function () {
                var select = ($(this).text());
                document.getElementById("btn-tagSettings").classList.remove("disabled"); // Enable button. Otherwise disabled

                if (userHasEmail) {
                    document.getElementById("btn-tagAlerts").classList.remove("disabled"); // Enable button. Otherwise disabled
                }

                document.getElementById("userSelectionHeader").style.display = "block"; // Displaying header for selected item
                document.getElementById("userSelectionHeader").innerHTML = select; // Adding selected item to the header

                document.getElementById("infoSelectedItem").style.display = "none";
            });
        });

        var selectedTagId, tagIdInModal;
        $('#btn-tagSettings').click(function () {

            if (selectedTagId === tagIdInModal) {
                $('#tagSettingsModal').modal('show');
                return;
            }

            let url = '/Home/_TagSettingsModal/?tagID=' + selectedTagId;
            $.get(url, (data) => {
                $('#tagSettingsModal').replaceWith(data);
                tagIdInModal = selectedTagId;
                $('#TagsId').val(selectedTagId);
                $('#tagSettingsModal').modal('show');
            });
        });

        $('#btn-tagAlerts').click(function () {
            let url = '/Home/_GetAllAlerts/?tagID=' + selectedTagId;
            $.get(url, (data) => {
                $('#existingAlerts').html(data);
            });
        });

        function setSelectedTagId(tagid) {
            displaySelectedTagHeader();
            document.getElementById("loading-tagdata").style.display = "block";

            if (document.getElementById("lastUpdated-grp").style.display = "block") {
                document.getElementById("lastUpdated-grp").style.display = "none";
            }

            selectedTagId = tagid;
            $("#groupchartarea").html("");
            if (userHasEmail) {

                $('#addAlarmBtn').val(tagid);

                // Checking if buttons are hidde (because a group was selected), and displaying them
                let alertBtn = document.getElementById("btn-tagAlerts");
                let settingsBtn = document.getElementById("btn-tagSettings");
                if (alertBtn.style.display == "none" || settingsBtn.style.display == "none") {
                    alertBtn.style.display = "block";
                    settingsBtn.style.display = "block";
                }
            }
            let url;
            if (dataInterval != 1) {
                url = `/Home/LoggedInApiData/?TagID=${tagid}&interval=${dataInterval}`;
            } else {
                url = "/Home/LoggedInApiData/?TagID=" + tagid;
            }
            $.ajax({
                url: url,
                dataType: 'json',
            }).done(function (results) {
                let time = [], temp = [], hum = [], press = [];
                results.forEach(row => {
                    time.push(parseDate(row.Time));
                    temp.push(row.Data.temperature);
                    hum.push(row.Data.humidity);
                    press.push(row.Data.pressure);

                });
                updateCharts(time, temp, hum, press);
                let warningElement = document.getElementById("oldVersionWarning");
                if (tagVersion(results[0].Data.vers)) {
                    if (warningElement.style.display != "block") {
                        warningElement.style.display = "block";
                    }
                    //console.log('do something to some element?');
                }

                document.getElementById("chartarea").style.display = "block";
                document.getElementById("intervalUpdateInfo").style.display = "none";
                setApiCallTime(); // Set api call time for "Updated x ago"

                highlightEye();
                highlightIcons();

                displayDataIntervalText();
                document.getElementById("loading-tagdata").style.display = "none";
            });
        }

        function tagVersion(vers) {
            if (vers == '03') {
                console.log(vers);
                return true;
            } else if (vers == '05') {
                console.log(vers);
            }
        }

        function updateCharts(labels, temp, hum, press) {
            configTemp.data.labels = labels;
            configHum.data.labels = labels;
            configPress.data.labels = labels;

            configTemp.data.datasets[0].data = temp;
            configHum.data.datasets[0].data = hum;
            configPress.data.datasets[0].data = press;

            document.getElementById('tagTempNow').textContent = temp[temp.length - 1];
            document.getElementById('tagHumNow').textContent = hum[hum.length - 1];
            document.getElementById('tagPressNow').textContent = press[press.length - 1];

            window.tempChart.update();
            window.humChart.update();
            window.pressChart.update();
        }

        function parseDate(date) {
            let d = /\/Date\((\d*)\)\//.exec(date);
            if (d) {
                let time = new Date(+d[1]);
                let options = { year: '2-digit', month: 'numeric', day: '2-digit', hour: '2-digit', minute: '2-digit' };
                //let options = { dateStyle: 'short', timeStyle: 'short' };
                //let options = { timeStyle: 'short' };
                return time.toLocaleDateString(navigator.language, options);
            }
        }

        function setSelectedGroupId(groupid) {
            displaySelectedTagHeader();
            document.getElementById("loading-tagdata").style.display = "block";
            selectedGroupId = groupid;
            if (userHasEmail) {
                //Hiding buttons in case user selected a group instead of a tag
                let alertBtn = document.getElementById("btn-tagAlerts");
                let settingsBtn = document.getElementById("btn-tagSettings");
                alertBtn.style.display = "none";
                settingsBtn.style.display = "none";
            }
            let url;
            if (dataInterval != 1) {
                url = `/Home/_GroupTagDataPartial/?groupID=${groupid}&interval=${dataInterval}`;
            } else {
                url = "/Home/_GroupTagDataPartial/?groupID=" + groupid;
            }
            $.get(url, (data) => {
                $("#groupchartarea").html(data);
            });
            document.getElementById("chartarea").style.display = "none";
            document.getElementById("intervalUpdateInfo").style.display = "none";

            highlightEye();
            displayDataIntervalText();
        }

        function setGroupId(selectedGroup) {
            let label = document.getElementById('textForTagToGroup');
            //label.innerHTML = `Add tag to group: ${selectedGroup.text}`;
            label.innerHTML = `${selectedGroup.text}`;
            $('#ListsId').val(selectedGroup.id);
            let container = document.getElementById('addToGroupSubmitDiv');
            container.style.display = 'block';
        }

        var dataInterval = 1;
        function setDataInterval(selectedInterval) {
            dataInterval = selectedInterval.dataset.interval;
            let intervalDefaultText = "Data interval is ";
            let intervalUpdateText = "Please select again to apply new interval.";
            document.getElementById("intervalInfo").innerHTML = intervalDefaultText + selectedInterval.text;
            document.getElementById("intervalUpdateInfo").innerHTML = intervalUpdateText;
            document.getElementById("intervalUpdateInfo").style.display = "block";
        }

        let tempChartColumn = document.getElementById("col-chart-temperature");
        let humiChartColumn = document.getElementById("col-chart-humidity");
        let pressChartColumn = document.getElementById("col-chart-pressure");

        // Temperature chart highlighting
        function highlightTempChart() {
            if (tempChartColumn.classList.contains("col-lg-4")) {
                tempChartColumn.classList.remove("col-lg-4");
                tempChartColumn.classList.add("col-lg-12");
            } else {
                tempChartColumn.classList.remove("col-lg-12");
                tempChartColumn.classList.add("col-lg-4");
            }
        }

        // Humidity chart highlighting
        function highlightHumiChart() {
            if (humiChartColumn.classList.contains("col-lg-4")) {
                humiChartColumn.classList.remove("col-lg-4");
                humiChartColumn.classList.add("col-lg-12");
            } else {
                humiChartColumn.classList.remove("col-lg-12");
                humiChartColumn.classList.add("col-lg-4");
            }
        }

        // Air pressure chart highlighting
        function highlightPressChart() {
            if (pressChartColumn.classList.contains("col-lg-4")) {
                pressChartColumn.classList.remove("col-lg-4");
                pressChartColumn.classList.add("col-lg-12");
            } else {
                pressChartColumn.classList.remove("col-lg-12");
                pressChartColumn.classList.add("col-lg-4");
            }
        }

        function displayDataIntervalText() {
            let textElement = document.getElementById("intervalInfo");

            if (textElement.style.display != "block") {
                textElement.style.display = "block";
            }
        }

        function displaySelectedTagHeader() {
            let element = document.getElementById("home-selectedTag");

            if (element.style.display != "block") {
                element.style.display = "block";
            }
        }
    </script>

    @* Set api call time when user is not logged in and viewing tag data *@
    @if (ViewBag.TagData != null)
    {
        <script>
            setApiCallTime(null);
        </script>
    }
}
