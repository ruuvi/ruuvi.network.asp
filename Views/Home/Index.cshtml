@using Microsoft.AspNet.Identity;
@using RuuviTagApp.Models;
@using RuuviTagApp.ViewModels;
@{
    ViewBag.Title = "Home";

    MacAddressModel mam = Model is MacAddressModel ? Model : new MacAddressModel();
    string containerType;

    <script>
        //Putting the datas viewbags into "let" variables
        let labelTime = [@Html.Raw(ViewBag.apiTime)];
        let labelTemp = [@Html.Raw(ViewBag.apiTempData)];
        let labelHum = [@Html.Raw(ViewBag.apiHumData)];
        let labelPress = [@Html.Raw(ViewBag.apiPressData)];
    </script>

    string lastTemp = "";
    string lastHumi = "";
    string lastPressure = "";

    // Partial views
    @Html.Partial("~/Views/Home/_TemperatureModal.cshtml")
    @Html.Partial("~/Views/Home/_HumidityModal.cshtml")
    @Html.Partial("~/Views/Home/_AirpressureModal.cshtml")
}


@* Tag navbar visible only when user is logged in *@
@if (Request.IsAuthenticated)
{
    @Html.Partial("~/Views/Home/_TagNav.cshtml")

    if (!ViewBag.UserHasEmail)
    {
        <script>
            document.getElementById("btn-tagAlerts").classList.add("disabled");
            document.getElementById("btn-tagAlerts").style.display = "none";
        </script>
    }

} @*End of tag navbar*@

@*Choose container type based on the user login status.*@
@if (Request.IsAuthenticated)
{
    containerType = "container-fluid";
}
else
{
    containerType = "container";
}
<div class="@containerType body-content" id="body-content">
    <p class="text-danger">@ViewBag.GeneralError</p>
    @* Content visible only when user is not logged in *@
    @if (!Request.IsAuthenticated && ViewBag.TagData == null)
    {
        <div class="row">
            <div class="col-md-6">
                <h2>Sign in using Google</h2>
                @Html.Partial("~/Views/Account/_ExternalLoginPartial.cshtml", new ExternalLoginListViewModel())
            </div>
            <div class="col-md-6 mt-lg-0 mt-5">
                <h2>Continue without signing in</h2>
                <div class="form-group">
                    @Html.Partial("~/Views/Home/_SearchTagPartial.cshtml", mam)
                </div>
            </div>
        </div>
        ExternalLoginConfirmationViewModel elcvm = Model is ExternalLoginConfirmationViewModel ?
            Model : new ExternalLoginConfirmationViewModel();
        @Html.Partial("~/Views/Account/_ExternalLoginConfirmationModal.cshtml", elcvm)
    } @*End of content visible only when user is not logged in*@

    @* Content visible only when user is logged in *@
    @if (Request.IsAuthenticated)
    {
        <div id="infoSelectedItem">
            <p>Select a RuuviTag or a group to display data</p>
        </div>

        <div class="home-selectedTag">
            <h2 id="userSelectionHeader"></h2>
        </div>

        AddTagModel add = Model is AddTagModel ? Model : new AddTagModel();
        @Html.Partial("~/Views/Home/_AddTagModal.cshtml", add)
        if (Model is RuuviTagModel tag)
        {
            @Html.Partial("~/Views/Home/_TagSettingsModal.cshtml", tag)
        }
        else
        {
            <div id="tagSettingsModal"></div>
        }
        AddAlertModel alert = Model is AddAlertModel ? Model : new AddAlertModel();
        @Html.Partial("~/Views/Home/_TagAlertsModal.cshtml", alert)
    }@*End of content visible only when user is logged in*@

    @if (ViewBag.TagData != null)
    {
        foreach (var item in ViewBag.TagData)
        {
            lastTemp = item.Data.temperature;
            lastHumi = item.Data.humidity;
            lastPressure = item.Data.pressure;
        }

        //Example data
        @*<h1 class="text-danger" style="opacity:0.6">This is dummy data</h1>*@
        <div class="RuuviTagData">
            <div class="row">
                <div class="col-lg-6">
                    <div class="row" id="ruuviTagTemperature">
                        <div class="col-lg-12 col-sm-12">
                            <a class="btn btn-tagdata-temp" id="btn-TagTemp" onclick="openTempChartModal()" title="View tag temperature"></a>
                            @*<p class="tagdata-value">38.26</p> <span class="celsius">&#176;C</span>*@
                            <p class="tagdata-value">@lastTemp</p> <span class="celsius">&#176;C</span>
                            <p class="tagdata-header">Temperature</p>
                            <hr class="tagdata-hr" />
                        </div>
                    </div>
                    <div class="row" id="ruuviTagHumidity">
                        <div class="col-lg-12 col-sm-12">
                            <a class="btn btn-tagdata-hum" id="btn-TagHum" onclick="openHumiChartModal()" title="View tag humidity"></a>
                            @*<p class="tagdata-value">85.5</p> <span class="percent">%</span>*@
                            <p class="tagdata-value">@lastHumi</p> <span class="percent">%</span>
                            <p class="tagdata-header">Humidity</p>
                            <hr class="tagdata-hr" />
                        </div>
                    </div>
                    <div class="row" id="ruuviTagAirPressure">
                        <div class="col-lg-12 col-sm-12">
                            <a class="btn btn-tagdata-air" id="btn-TagAir" onclick="openAirChartModal()" title="View tag air pressure"></a>
                            @*<p class="tagdata-value">1015.36</p> <span class="hpa">hPa</span>*@
                            <p class="tagdata-value">@lastPressure</p> <span class="hpa">hPa</span>
                            <p class="tagdata-header">Air pressure</p>
                            <hr class="tagdata-hr" />
                        </div>
                    </div>
                </div>
                <div class="col-lg-6 ruuvi-eye-home d-none d-md-block" id="RuuviEyeBg" onmouseover="highlightEye()">
                </div>
            </div>
            <p class="tip d-lg-none">To view charts, please <a class="link" onclick="highlightIcons()" role="button">press the icons</a> above.</p>
            <div id="desktopCharts">
                <div class="row">
                    <div class="col-lg-12 mt-2">
                        <h1 class="tagdata-header">Temperature</h1>
                        @*@Html.Partial("~/Views/Home/_TemperatureChart.cshtml")*@
                        <canvas id="tempchart"></canvas>
                    </div>
                    <div class="col-lg-12 mt-5">
                        <h1 class="tagdata-header">Humidity</h1>
                        @*@Html.Partial("~/Views/Home/_HumidityChart.cshtml")*@
                        <canvas id="humchart"></canvas>
                    </div>
                    <div class="col-lg-12 mt-5">
                        <h1 class="tagdata-header">Air pressure</h1>
                        @*@Html.Partial("~/Views/Home/_AirpressureChart.cshtml")*@
                        <canvas id="presschart"></canvas>

                    </div>
                </div>
            </div>
            @if (ViewBag.TagData != null)
            {
                <a class="btn btn-general mt-5" href="/Home/Index">Sign in or search another RuuviTag</a>
            }
        </div>
    }
</div>

@section scripts{

    <script type="text/javascript">
                //Line chart script for temperature
        var ctx = document.getElementById('tempchart').getContext('2d');
        var tempChart = new Chart(ctx, {
                type: 'line',
            data: {
                labels: labelTime,
                datasets: [{
                label: 'Temperature',
                    data: labelTemp,
                    backgroundColor: [
                        'rgba(107, 234, 225, 0.2)'
                    ],
                    borderColor: [
                        'rgba(107, 234, 225, 1)'
                    ],
                    borderWidth: 3
                }]
            },
            options: {
                scales: {
                yAxes: [{
                ticks: {
                beginAtZero: true
                        }
                    }]
                }
            }
        });

        var ctxm = document.getElementById('tempchartmodal').getContext('2d');
        var tempChartModal = new Chart(ctxm, {
            type: 'line',
            data: {
                labels: labelTime,
                datasets: [{
                    label: 'Temperature',
                    data: labelTemp,
                    backgroundColor: [
                        'rgba(107, 234, 225, 0.2)'
                    ],
                    borderColor: [
                        'rgba(107, 234, 225, 1)'
                    ],
                    borderWidth: 3
                }]
            },
            options: {
                scales: {
                    yAxes: [{
                        ticks: {
                            beginAtZero: true
                        }
                    }]
                }
            }
        });

        //Line chart script for humidity
        var ctz = document.getElementById('humchart').getContext('2d');
        var humidityChart = new Chart(ctz, {
            type: 'line',
            data: {
                labels: labelTime,
                datasets: [{
                    label: 'Humidity',
                    data: labelHum,
                    backgroundColor: [
                        'rgba(107, 234, 225, 0.2)'
                    ],
                    borderColor: [
                        'rgba(107, 234, 225, 1)'
                    ],
                    borderWidth: 3
                }]
            },
            options: {
                scales: {
                    yAxes: [{
                        ticks: {
                            beginAtZero: true
                        }
                    }]
                }
            }
        });

        var ctzm = document.getElementById('humchartmodal').getContext('2d');
        var humidityChartModal = new Chart(ctzm, {
            type: 'line',
            data: {
                labels: labelTime,
                datasets: [{
                    label: 'Humidity',
                    data: labelHum,
                    backgroundColor: [
                        'rgba(107, 234, 225, 0.2)'
                    ],
                    borderColor: [
                        'rgba(107, 234, 225, 1)'
                    ],
                    borderWidth: 3
                }]
            },
            options: {
                scales: {
                    yAxes: [{
                        ticks: {
                            beginAtZero: true
                        }
                    }]
                }
            }
        });

        //Line chart script for pressure
        var ctc = document.getElementById('presschart').getContext('2d');
        var pressChart = new Chart(ctc, {
            type: 'line',
            data: {
                labels: labelTime,
                datasets: [{
                    label: 'Pressure',
                    data: labelPress,
                    backgroundColor: [
                        'rgba(107, 234, 225, 0.2)'
                    ],
                    borderColor: [
                        'rgba(107, 234, 225, 1)'
                    ],
                    borderWidth: 3
                }]
            },
            options: {
                scales: {
                    yAxes: [{
                        ticks: {
                            beginAtZero: true
                        }
                    }]
                }
            }
        });

        var ctcm = document.getElementById('presschartmodal').getContext('2d');
        var pressChartModal = new Chart(ctcm, {
            type: 'line',
            data: {
                labels: labelTime,
                datasets: [{
                    label: 'Pressure',
                    data: labelPress,
                    backgroundColor: [
                        'rgba(107, 234, 225, 0.2)'
                    ],
                    borderColor: [
                        'rgba(107, 234, 225, 1)'
                    ],
                    borderWidth: 3
                }]
            },
            options: {
                scales: {
                    yAxes: [{
                        ticks: {
                            beginAtZero: true
                        }
                    }]
                }
            }
        });



        $(window).on('load', function () {
            let showRegisterModal = @((ViewBag.ShowRegisterModal ?? false).ToString().ToLower());
            if (showRegisterModal) {
                $('#externalRegisterModal').modal('show');
            }
            let showAddTag = @((ViewBag.ShowAddTag ?? false).ToString().ToLower());
            if (showAddTag) {
                $('#addTagModal').modal('show');
            }
            let showTagSettings = @((ViewBag.ShowTagSettings ?? false).ToString().ToLower());
            if (showTagSettings) {
                $('#tagSettingsModal').modal('show');
            }
            userHasEmail = @((ViewBag.UserHasEmail ?? false).ToString().ToLower());
        });
        $('.svg-btn-new').click(function () {
            $('#addTag').toggleClass('shown');
        });

        // Temperature chart Modal
        function openTempChartModal() {
            $('#temperatureChartModal').modal('show')
        }

        // Humidity chart Modal
        function openHumiChartModal() {
            $('#humidityChartModal').modal('show')
        }

        // Air pressure chart Modal
        function openAirChartModal() {
            $('#airpressureChartModal').modal('show')
        }

        // Highight icons when user presses the tip (if user is lost)
        function highlightIcons() {
            let temp = document.getElementById("btn-TagTemp");
            let hum = document.getElementById("btn-TagHum");
            let air = document.getElementById("btn-TagAir");
            let btns = [temp, hum, air];

            for (var i = 0; i < btns.length; i++) {
                let btn = btns[i];
                btn.classList.add("highlight");
                var t = setTimeout(function () {
                    btn.classList.remove("highlight");
                }, 1000);
            }
        }

        // Highlight eye on mouse over
        function highlightEye() {
            let eye = document.getElementById("RuuviEyeBg");
            eye.classList.toggle('fade');
        }

        // Get user selection from _TagNav dropdown list
        $(document).ready(function () {
            $('#TagListDropDown a').on('click', function () {
                var select = ($(this).text());
                document.getElementById("btn-tagSettings").classList.remove("disabled"); // Enable button. Otherwise disabled

                if (userHasEmail) {
                    document.getElementById("btn-tagAlerts").classList.remove("disabled"); // Enable button. Otherwise disabled
                }

                document.getElementById("userSelectionHeader").style.display = "block"; // Displaying header for selected item
                document.getElementById("userSelectionHeader").innerHTML = select; // Adding selected item to the header

                document.getElementById("infoSelectedItem").style.display = "none";
            });
        });

        var selectedTagId, tagIdInModal;
        $('#btn-tagSettings').click(function () {

            if (selectedTagId === tagIdInModal) {
                $('#tagSettingsModal').modal('show');
                return;
            }

            let url = '/Home/_TagSettingsModal/?tagID=' + selectedTagId;
            $.get(url, (data) => {
                $('#tagSettingsModal').replaceWith(data);
                tagIdInModal = selectedTagId;
                $('#tagSettingsModal').modal('show');
            });
        });

        $('#btn-tagAlerts').click(function () {
            let url = '/Home/_GetAllAlerts/?tagID=' + selectedTagId;
            $.get(url, (data) => {
                $('#existingAlerts').html(data);
            });
        });

        function setSelectedTagId(tagid) {
            selectedTagId = tagid;
            if (userHasEmail) {
                $('#addAlarmBtn').val(tagid);

                // Checking if buttons are hidde (because a group was selected), and displaying them
                let alertBtn = document.getElementById("btn-tagAlerts");
                let settingsBtn = document.getElementById("btn-tagSettings");
                if (alertBtn.style.display == "none" || settingsBtn.style.display == "none") {
                    alertBtn.style.display = "block";
                    settingsBtn.style.display = "block";
                }
            }
        }

        function setSelectedGroupId(groupid) {
            selectedGroupId = groupid;
            if (userHasEmail) {
                //Hiding buttons in case user selected a group instead of a tag
                let alertBtn = document.getElementById("btn-tagAlerts");
                let settingsBtn = document.getElementById("btn-tagSettings");
                alertBtn.style.display = "none";
                settingsBtn.style.display = "none";
            }
        }
    </script>
}