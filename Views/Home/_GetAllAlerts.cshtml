@model IEnumerable<RuuviTagApp.Models.TagAlertModel>

@{ 
    var AlertTypes = new Dictionary<int, string[]>() {
        { 1, new string[] { "Temperature high", "°C" }},
        { 2, new string[] { "Temperature low", "°C" }},
        { 3, new string[] { "Humidity high", "%" }},
        { 4, new string[] { "Humidity low", "%" }},
        { 5, new string[] { "Pressure high", "Pa" }},
        { 6, new string[] { "Pressure low", "Pa" }},
    };
}
@if (Model.Count() > 0)
{
    if (ViewBag.AlertErrors.Count > 0)
    {
        <p class="text-danger">To receive proper alert notifications, please fix the following alerts:</p>
        <ul class="text-danger">
            @foreach (var er in ViewBag.AlertErrors)
            {
                <li><p>@er</p></li>
            }
        </ul>
    }
    <table class="table table-ruuvi table-ruuvi-hover">
        <tr>
            <th>Alert Type</th>
            <th>Alert Limit</th>
            <th></th>
        </tr>

    @foreach (var item in Model)
    {
        var typeFound = AlertTypes.TryGetValue(@item.AlertTypeId, out string[] type);
        <tr>
            <td>@(typeFound ? $"{type[0]} ({@type[1]})" : item.TagAlertType.TypeName)</td>
            <td>@Html.DisplayFor(modelItem => item.AlertLimit)</td>
            <td>
                @using (Html.BeginForm("RemoveAlert", "Home", FormMethod.Post))
                {
                    @Html.AntiForgeryToken()
                    <button class="btn btn-sm btn-general" type="submit" name="alertID" value="@item.AlertId">Remove</button>
                }
            </td>
        </tr>
    }

    </table>
}
